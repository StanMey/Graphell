-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/StanMey/Graphell</a>
@package dep-eindopdracht
@version 0.1.0.0


-- | This module contains all datatypes to represent a Graph.
module Datatypes

-- | A single vertex is being noted as an integer
type Vertex = Int

-- | The weight a Edge has between two points in the graph
type Weight = Int

-- | A edge holds a certain direction to another Vertex with a weight to it
type Edge = (Vertex, Weight)

-- | A table is a map from one vertex to other vertices
type Graph = Map Vertex [Edge]


-- | This module contains all necessary functions to retrieve information
--   from a Graph.
module Lib

-- | Checks for the existence of a certain Vertex
vertexExist :: Vertex -> Graph -> Bool

-- | Returns the amount of the vertices in the Graph
verticesAmount :: Graph -> Int

-- | Gets a list of all the adjacent vertices with weights if they exist
--   otherwise Nothing
getAdjacentVertices :: Vertex -> Graph -> Maybe [Edge]

-- | Gets a list of all the existing Vertices
getAllVertices :: Graph -> [Vertex]

-- | Get the total amount of Edges in the undirectional Graph
getEdgesAmount :: Graph -> Int

-- | Counts the connected Edges of a certain Vertex
countEdges :: Vertex -> Graph -> Int

-- | Get the total sum of all the Weights of the Edges from one Vertex
getWeightSum :: Vertex -> Graph -> Int

-- | Gets all the Edges from a certain Vertex
getAllEdges :: Vertex -> Graph -> [Edge]

-- | Returns for a certain Vertex its edges with other vertices and weights
adjacentVerticesToString :: Vertex -> Graph -> [String]

-- | Puts info about the relation between a vertex and its edges in a list
--   of Strings
edgeToString :: Vertex -> [Edge] -> [String]

-- | Gets all the adjacent connected Edges and returns all the Vertices of
--   those Edges
getOnlyConnVertices :: Vertex -> Graph -> [Vertex]

-- | Checks if two Vertices are connected
twoVerticesConn :: Vertex -> Vertex -> Graph -> Bool

-- | Returns any common connected Vertices between two Vertices
getCommonVertices :: Vertex -> Vertex -> Graph -> [Vertex]

-- | Checks if two Vertices share a common connected Vertex
haveCommonVertices :: Vertex -> Vertex -> Graph -> Bool

-- | Compares two lists and returns the common Vertices
compareTwoLists :: [Vertex] -> [Vertex] -> [Vertex]
